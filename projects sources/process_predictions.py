import torch
from aiogram import md, types
import datetime
from database_process import write_disease, write_state, write_detected, allow_to_write, get_disease_story, get_state_story, get_detected_story

dictionary_of_disease = {
    0 : '–ê–∫–Ω–µ', 1 : '–ê–∫—Ç–∏–Ω–∏—á–µ—Å–∫–∏–º –∫–µ—Ä–∞—Ç–æ–∑–æ–º', 2 : '–î–µ—Ä–º–∞—Ç–∏—Ç–æ–º', 3: '–ü–∏–≥–º–µ–Ω—Ç–Ω—ã–º –ø—è—Ç–Ω–æv',
    4: '–ö–∞–Ω–¥–∏–¥–æ–∑–æ–º –∫–æ–∂–∏', 5: '–°–æ—Å—É–¥–∏—Å—Ç—ã–º–∏ –æ–ø—É—Ö–æ–ª—è–º–∏', 6: '–í–∏—Ä—É—Å–Ω–æ–π –∏–Ω—Ñ–µ–∫—Ü–∏–µ–π'
}

dictionary_of_state = {0: "–õ–µ–≥–∫–∞—è –ø–æ—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å", 1: "–°—Ä–µ–¥–Ω—è—è –ø–æ—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å", 2: "–¢—è–∂–µ–ª–∞—è –ø–æ—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å"}

def make_help():
    return  md.text(
        md.text("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤—Ä–∞—á–µ–±–Ω—ã–º–∏ –¥–∏–∞–≥–Ω–æ–∑–∞–º–∏!"),
        md.text("\n"),
        md.text("–≠—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–Ω–∫—Ü–∏–π:"),
        md.text("   üî∏–î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /classify_disease"),
        md.text("   üî∏–î–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∏—Ü–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /classify_state"),
        md.text("   üî∏–î–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /detect_acne"),
        md.text("   üî∏–î–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò—Å—Ç–æ—Ä–∏—è' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /history"),
        md.text("\n"),
        md.text("–ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –∫–æ–º–º–∞–Ω–¥ –≤—ã–≤–µ–¥–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –∞–Ω–∞–ª–∏–∑."),
        sep='\n',
    )

def make_text_prediction(prediction: torch.tensor, user_id):
    prediction = prediction.squeeze()
    write_disease(user_id, torch.argmax(prediction).item())
    return md.text(
        md.text('–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏, —á—Ç–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è:'),
        md.text('üî∏', '–ê–∫–Ω–µ:', round(prediction[0].item(), 2)),
        md.text('üî∏', '–ê–∫—Ç–∏–Ω–∏—á–µ—Å–∫–∏–π –∫–µ—Ä–∞—Ç–æ–∑:', round(prediction[1].item(), 2)),
        md.text('üî∏', '–î–µ—Ä–º–∞—Ç–∏—Ç:', round(prediction[2].item(), 2)),
        md.text('üî∏', '–ü–∏–≥–º–µ–Ω—Ç–Ω–æ–µ –ø—è—Ç–Ω–æ:', round(prediction[3].item(), 2)),
        md.text('üî∏', '–ö–∞–Ω–¥–∏–¥–æ–∑ –∫–æ–∂–∏:', round(prediction[4].item(), 2)),
        md.text('üî∏', '–°–æ—Å—É–¥–∏—Å—Ç—ã–µ –æ–ø—É—Ö–æ–ª–∏:', round(prediction[5].item(), 2)),
        md.text('üî∏', '–í–∏—Ä—É—Å–Ω–∞—è –∏–Ω—Ñ–µ–∫—Ü–∏—è:', round(prediction[6].item(), 2)),
        md.text("\n"),
        md.text("–ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ –±–æ–ª–µ–∑–Ω—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: " + dictionary_of_disease[torch.argmax(prediction).item()]),
        sep='\n',
    )

def make_text_state_prediction(prediction: torch.tensor, user_id):
    write_state(user_id, prediction)
    match prediction:
        case 0:
            return md.text(
                md.text('–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞: –ª–µ–≥–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å'),
                md.text('–î–∞–∂–µ —É –ª—é–¥–µ–π —Å –∫—Ä–∞—Å–∏–≤–æ–π –∑–¥–æ—Ä–æ–≤–æ–π –∫–æ–∂–µ–π –∏–Ω–æ–≥–¥–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä—ã—â–∏–∫–∏ –Ω–∞ –ª–∏—Ü–µ.'),
                md.text('–≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏, –∏–Ω–æ–≥–¥–∞ ‚Äî —Å –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏ –∫–æ–∂–∏.'),
                md.text('–û–±—ã—á–Ω–æ —Ç–∞–∫–∏–µ –ø—Ä—ã—â–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–∞–º–∏ –∏ –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–µ–¥–æ–≤ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—é—Ç.'),
                md.text(' –≠—Ç–∞ —Å—Ç–µ–ø–µ–Ω—å —Ç—è–∂–µ—Å—Ç–∏ –∞–∫–Ω–µ –µ—â–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä.'),
                sep = '\n',
            )
        case 1:
            return md.text(
                md.text('–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞: —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å'),
                md.text('–ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–µ–ø–µ–Ω–∏ —É–∑–ª–æ–≤ –µ—â–µ –Ω–µ—Ç, –Ω–æ –∫–æ–∂–∞ –≤–æ–∫—Ä—É–≥ –ø—Ä—ã—â–µ–π –∏ –∫–æ–º–µ–¥–æ–Ω–æ–≤ –≤–æ—Å–ø–∞–ª–µ–Ω–Ω–∞—è, –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π –Ω–∞ –≤–∏–¥ —Å–∏–Ω—é—à–Ω–æ-—Ä–æ–∑–æ–≤—ã–π —Ü–≤–µ—Ç, –¥–æ—Å—Ç–∞–≤–ª—è—è –±–æ–ª—å–Ω–æ–º—É –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å –ª—é–¥—å–º–∏.'),
                md.text('–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø–∞—Ü–∏–µ–Ω—Ç—É —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å –∞–∫–Ω–µ –Ω–∞ —ç—Ç–æ–π —Å—Ç–∞–¥–∏–∏ —É–∂–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏ –æ–Ω –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π –∫ –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥—É.'),
                md.text('–ü—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç–µ–ø–µ–Ω–∏ —Ç—è–∂–µ—Å—Ç–∏ –∞–∫–Ω–µ –≤—Ä—è–¥ –ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è –æ–±–æ–π—Ç–∏—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞—Ä—É–∂–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –¥–ª—è –ª–µ—á–µ–Ω–∏—è –≤–æ—Å–ø–∞–ª–µ–Ω–Ω—ã—Ö –ø—Ä—ã—â–µ–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏.'),
                sep='\n',
            )
        case 2:
            return md.text(
                md.text('–ú–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–ª–∞, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞: —Ç—è–∂–µ–ª–∞—è –ø–æ—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç—å'),
                md.text('–¢—è–∂–µ–ª–∞—è —Å—Ç–µ–ø–µ–Ω—å –∞–∫–Ω–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –±–æ–ª—å—à–∏—Ö –≤–æ—Å–ø–∞–ª–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–∫–æ–≤ –∫–æ–∂–∏, –±–æ–ª–µ–∑–Ω–µ–Ω–Ω–æ—Å—Ç—å—é —É–∑–ª–æ–≤.'),
                md.text('–ê–∫–Ω–µ —Ç—è–∂–µ–ª–æ–π —Å—Ç–µ–ø–µ–Ω–∏ –ª–µ—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞—Ä—É–∂–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è, –≤ —Å–æ—Å—Ç–∞–≤ –∫–æ—Ç–æ—Ä–æ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—Ö–æ–¥—è—Ç –∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏.'),
                md.text('–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∞–º–∏ –ø–µ—Ä–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –∞–∫–Ω–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã —Ç–µ—Ç—Ä–∞—Ü–∏–∫–ª–∏–Ω–æ–≤–æ–≥–æ —Ä—è–¥–∞.'),
                sep='\n',
            )

def detection_prediction_text(draw_boxes, user_id):
    count_detected_disease = len(draw_boxes)
    write_detected(user_id, count_detected_disease)
    return "–ú–æ–¥–µ–ª—å –Ω–∞—à–ª–∞ –Ω–∞ –≤–∞—à–µ–º –ª–∏—Ü–µ %s –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –ª–µ—á–µ–Ω–∏—è. " % len(draw_boxes) + \
    "–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è —Å–¥–µ–ª–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–∏–ø –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è."

def prepare_history(user_id):
    if (allow_to_write(user_id) == 1):
        disease_story = get_disease_story(user_id)
        format = "%Y-%m-%d %H:%M:%S.%f"
        message_disease_history = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É –í–∞—Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: \n"
        for i in disease_story:
            disease = i[0]
            request_date = datetime.datetime.strptime(i[1], format)
            request_date = request_date.replace(second=0, microsecond=0)
            message_disease_history += "üî∏%s-%s-%s %s:%s - %s\n" % (request_date.day, request_date.month, request_date.year, request_date.hour, request_date.minute, disease)

        state_story = get_state_story(user_id)
        message_state_history = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—è—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–æ–∂–∏: \n"
        for i in state_story:
            state = i[0]
            request_date = datetime.datetime.strptime(i[1], format)
            request_date = request_date.replace(second=0, microsecond=0)
            message_state_history += "üî∏%s-%s-%s %s:%s - %s\n" % (request_date.day, request_date.month, request_date.year, request_date.hour, request_date.minute, dictionary_of_state[state])

        detected_story = get_detected_story(user_id)
        message_detect_history = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π: \n"
        for i in detected_story:
            count = i[0]
            request_date = datetime.datetime.strptime(i[1], format)
            request_date = request_date.replace(second=0, microsecond=0)
            message_detect_history += "üî∏%s-%s-%s %s:%s - %s\n" % (request_date.day, request_date.month, request_date.year, request_date.hour, request_date.minute, count)
        return message_disease_history, message_state_history, message_detect_history
